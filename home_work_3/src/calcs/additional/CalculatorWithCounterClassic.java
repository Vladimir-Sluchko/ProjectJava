//5. Создать класс CalculatorWithCounterClassic.
//	5.1 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
//	5.2 Данный класс должен наследовать класс CalculatorWithMathExtends.
//	5.3 В классе должен быть метод void incrementCountOperation() который должен увеличивать внутренний счётчик (поле)
//	в калькуляторе.
//	5.4 В классе должен быть метод long getCountOperation() который должен возвращать количество использований данного
//	калькулятора (поле).
//	5.5 Создать класс CalculatorWithCounterClassicMain в котором будет точка входа (main метод). В main методе требуется
//	создать экземпляр калькулятора и используя методы из данного экземпляра посчитать выражения
//из задания 1, при каждой математической операции самостоятельно вызывать метод incrementCountOperation() для
// увеличения счётчика. Вывести в консоль результат.
//Какая проблема данного класса? Вроде всё красиво, всё ещё есть наследование, всё удобно разложено по отдельным методам.
//Но как всегда есть две беды... Дураки (программисты) и дороги (наш класс CalculatorWithCounterClassic). Дураки
// е умеют пользоваться дорогами, программисты не умеют пользоваться нашим классом CalculatorWithCounterClassic.
//Что обычно делают на дорогах чтобы дураки на них не убивались? -Правильно, делают дороги интуитивно понятными,
// безопасными, уменьшают количество мусорных знаков и делают так чтобы при их использовании дураку нельзя было
//бы ошибиться.
//Так вот проблема нашего CalculatorWithCounterClassic в том, что для увеличения счётчика программиста нужно
// заставить воспользоваться методом incrementCountOperation() чтобы в итоге наш счётчик операций был увеличен на 1.
//Можно сколько угодно настаивать на том, чтобы коллеги читали документацию к вашим классам, сколько угодно
// можно рассказывать, что там есть много важного... Они всё равно не будут её читать...
//Пока в продакшене проблем не возникнет, - документацию они не отроют в 90% случаев.
//Поэтому давайте немного воспользуемся прелестями наследования и большей степенью инкапсуляции. Просто сами,
// внутри нашего нового калькулятора, будем вызывать этот метод incrementCountOperation и снимем эту обязанность с программиста.
package calcs.additional;

import calcs.simple.CalculatorWithMathExtends;

public class CalculatorWithCounterClassic extends CalculatorWithMathExtends {
    private long countOperation;

    public long getCountOperation() {
        return countOperation;
    }

    public void incrementCountOperation(){
        countOperation++;
    }

}
